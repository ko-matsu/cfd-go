name: create-release-upload

on: 
  push:
    tags:
    - 'v*'

jobs:
  upload-object-alpine:
    name: upload-object-alpine
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v1
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: list
      run: ls -a $GITHUB_WORKSPACE
    - name: docker setup
      uses: docker://alpine:3.10
      with:
        entrypoint: /github/workspace/.github/workflows/docker/alpine_build_entrypoint.sh
    - name: create archive file
      run: |
        echo "---- dump output data ----"
        ls -l $GITHUB_WORKSPACE/dist/usr/local/*
        mkdir -p /tmp/cfd
        sudo chmod 777 /tmp/cfd
        sudo chown runner /tmp/cfd
        sudo cp -r $GITHUB_WORKSPACE/dist/usr /tmp/cfd
        cd /tmp/cfd
        sudo zip -r /tmp/cfd/cfd.zip usr
        sudo chmod 777 /tmp/cfd/cfd.zip
        sudo chown runner /tmp/cfd/cfd.zip
        sudo cp -rp /tmp/cfd/cfd.zip $GITHUB_WORKSPACE/dist/cfd.zip
        echo "---- dump zip file ----"
        sudo ls -l /tmp/cfd
    - name: pre-release-test
      uses: docker://golang:1.13-alpine
      with:
        entrypoint: /github/workspace/.github/workflows/docker/alpine_test_entrypoint.sh
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false
#      continue-on-error: true
    - name: Upload Release Asset
      id: upload-release-asset 
#      if: success()
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /tmp/cfd/cfd.zip
        asset_name: cfdgo-${{ steps.get_version.outputs.VERSION }}-alpine_x86_64.zip
        asset_content_type: application/zip
    - name: write upload url
      env:
        url: ${{ steps.create_release.outputs.upload_url }}
      run: |
        cd /tmp/cfd
        sudo echo $url > upload_url.txt
    - name: upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: artifact-upload_url
        path: /tmp/cfd/upload_url.txt

  upload-object-macos-static:
    name: upload-object-macos
    needs: upload-object-alpine
    runs-on: macos-latest

    steps:
    - name: checkout
      uses: actions/checkout@v1
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: create folder
      run: |
        echo "---- dump output data ----"
        mkdir -p /tmp/cfd/usr/local/lib
        sudo chmod 777 /tmp/cfd
        sudo chown runner /tmp/cfd
        sudo chmod 777 /tmp/cfd/usr
        sudo chown runner /tmp/cfd/usr
    - name: cmake-build
      id: cmake_build
      run: |
        mkdir build
        cd build
        cmake .. -DENABLE_SHARED=off -DCMAKE_BUILD_TYPE=Release -DTARGET_RPATH="/usr/local/lib;/usr/local/lib64"
        make
        sudo make install DESTDIR=/tmp/cfd
        cd ..
        export CURRENT_DIR=$(pwd)
        echo ::set-output name=CURRENT_DIR::$CURRENT_DIR
    - name: create archive file
      run: |
        cd /tmp/cfd
        sudo zip -r /tmp/cfd/cfd.zip usr
        sudo chmod 777 /tmp/cfd/cfd.zip
        sudo chown runner /tmp/cfd/cfd.zip
        echo "---- dump zip file ----"
        sudo ls -l /tmp/cfd
    - name: go test
      env:
        current_dir: ${{ steps.cmake_build.outputs.CURRENT_DIR }}
      run: |
        sudo cp -rf /tmp/cfd/usr /
        cd $current_dir
        go test
    - name: download artifact
      uses: actions/download-artifact@v1
      with:
        name: artifact-upload_url
    - name: dump upload url
      id: get_url
      run: |
        url=$(cat artifact-upload_url/upload_url.txt)
        echo ::set-output name=upload_url::$url
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: /tmp/cfd/cfd.zip
        asset_name: cfdgo-${{ steps.get_version.outputs.VERSION }}-darwin-static_x86_64.zip
        asset_content_type: application/zip
